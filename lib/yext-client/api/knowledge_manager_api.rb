=begin
#Yext API

# 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module YextClient
  class KnowledgeManagerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Bios: Create
    # Create new Bio List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_bio(account_id, v, body, opts = {})
      data, _status_code, _headers = create_bio_with_http_info(account_id, v, body, opts)
      return data
    end

    # Bios: Create
    # Create new Bio List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_bio_with_http_info(account_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_bio ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_bio" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_bio" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.create_bio" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/bios".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_bio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Custom Fields: Create
    # Creates a new Custom Field in an Account. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_custom_field(v, account_id, body, opts = {})
      data, _status_code, _headers = create_custom_field_with_http_info(v, account_id, body, opts)
      return data
    end

    # Custom Fields: Create
    # Creates a new Custom Field in an Account. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_custom_field_with_http_info(v, account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_custom_field ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_custom_field" if v.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_custom_field" if account_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.create_custom_field" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/customfields".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Events: Create
    # Create a new Event List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_event(account_id, v, body, opts = {})
      data, _status_code, _headers = create_event_with_http_info(account_id, v, body, opts)
      return data
    end

    # Events: Create
    # Create a new Event List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_event_with_http_info(account_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_event ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_event" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_event" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.create_event" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/events".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Locations: Create
    # Create a new Location.    ## Required fields * **`id`** * **`locationName`** * **`address`** * **`city`** * **`state`** * **`zip`** * **`countryCode`** * **`phone`** * **`categoryIds`** * **`featuredMessage`**   ## Optional fields that trigger warnings Submitting invalid values for certain optional fields will not trigger an error response. Instead, the success response will contain warning messages explaining why the invalid optional values were not stored in the system. The fields that generate warning messages are: <br><br> * **`paymentOptions`** * **`logo`** * **`photos`** * **`twitterHandle`** * **`facebookPageUrl`** * **`languages`**  
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_request 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_location(account_id, v, location_request, opts = {})
      data, _status_code, _headers = create_location_with_http_info(account_id, v, location_request, opts)
      return data
    end

    # Locations: Create
    # Create a new Location.    ## Required fields * **&#x60;id&#x60;** * **&#x60;locationName&#x60;** * **&#x60;address&#x60;** * **&#x60;city&#x60;** * **&#x60;state&#x60;** * **&#x60;zip&#x60;** * **&#x60;countryCode&#x60;** * **&#x60;phone&#x60;** * **&#x60;categoryIds&#x60;** * **&#x60;featuredMessage&#x60;**   ## Optional fields that trigger warnings Submitting invalid values for certain optional fields will not trigger an error response. Instead, the success response will contain warning messages explaining why the invalid optional values were not stored in the system. The fields that generate warning messages are: &lt;br&gt;&lt;br&gt; * **&#x60;paymentOptions&#x60;** * **&#x60;logo&#x60;** * **&#x60;photos&#x60;** * **&#x60;twitterHandle&#x60;** * **&#x60;facebookPageUrl&#x60;** * **&#x60;languages&#x60;**  
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_location_with_http_info(account_id, v, location_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_location ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_location" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_location" if v.nil?
      # verify the required parameter 'location_request' is set
      fail ArgumentError, "Missing the required parameter 'location_request' when calling KnowledgeManagerApi.create_location" if location_request.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(location_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Menus: Create
    # 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_menu(account_id, v, body, opts = {})
      data, _status_code, _headers = create_menu_with_http_info(account_id, v, body, opts)
      return data
    end

    # Menus: Create
    # 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_menu_with_http_info(account_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_menu ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_menu" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_menu" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.create_menu" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/menus".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Products: Create
    # Create a new Product List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_product(account_id, v, body, opts = {})
      data, _status_code, _headers = create_product_with_http_info(account_id, v, body, opts)
      return data
    end

    # Products: Create
    # Create a new Product List.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_product_with_http_info(account_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.create_product ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.create_product" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.create_product" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.create_product" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/products".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#create_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bios: Delete
    # Delete an existing Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_bio_list(account_id, list_id, v, opts = {})
      data, _status_code, _headers = delete_bio_list_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Bios: Delete
    # Delete an existing Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_bio_list_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_bio_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_bio_list" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.delete_bio_list" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_bio_list" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/bios/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_bio_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Custom Fields: Delete
    # Deletes a Custom Field in an Account.  The Custom Field will be removed from all locations, and all content entered in the Custom Field will be deleted permanently. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_custom_field(v, account_id, custom_field_id, opts = {})
      data, _status_code, _headers = delete_custom_field_with_http_info(v, account_id, custom_field_id, opts)
      return data
    end

    # Custom Fields: Delete
    # Deletes a Custom Field in an Account.  The Custom Field will be removed from all locations, and all content entered in the Custom Field will be deleted permanently. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_custom_field_with_http_info(v, account_id, custom_field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_custom_field ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_custom_field" if v.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_custom_field" if account_id.nil?
      # verify the required parameter 'custom_field_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_field_id' when calling KnowledgeManagerApi.delete_custom_field" if custom_field_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/customFields/{customFieldId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'customFieldId' + '}', custom_field_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Events: Delete
    # Delete an existing Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_event_list(account_id, list_id, v, opts = {})
      data, _status_code, _headers = delete_event_list_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Events: Delete
    # Delete an existing Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_event_list_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_event_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_event_list" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.delete_event_list" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_event_list" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/events/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_event_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Language Profiles: Delete
    # Remove a Language Profile from a location.
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_language_profile(account_id, location_id, language_code, v, opts = {})
      data, _status_code, _headers = delete_language_profile_with_http_info(account_id, location_id, language_code, v, opts)
      return data
    end

    # Language Profiles: Delete
    # Remove a Language Profile from a location.
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_language_profile_with_http_info(account_id, location_id, language_code, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_language_profile ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_language_profile" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.delete_language_profile" if location_id.nil?
      # verify the required parameter 'language_code' is set
      fail ArgumentError, "Missing the required parameter 'language_code' when calling KnowledgeManagerApi.delete_language_profile" if language_code.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_language_profile" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}/profiles/{language_code}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s).sub('{' + 'language_code' + '}', language_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_language_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Menus: Delete
    # Delete an existing Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_menu_list(account_id, list_id, v, opts = {})
      data, _status_code, _headers = delete_menu_list_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Menus: Delete
    # Delete an existing Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_menu_list_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_menu_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_menu_list" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.delete_menu_list" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_menu_list" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/menus/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_menu_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Products: Delete
    # Delete an existing Products List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_product_list(account_id, list_id, v, opts = {})
      data, _status_code, _headers = delete_product_list_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Products: Delete
    # Delete an existing Products List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_product_list_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.delete_product_list ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.delete_product_list" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.delete_product_list" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.delete_product_list" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/products/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#delete_product_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bios: Get
    # Retrieve a specific Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [BioListResponse]
    def get_bio(account_id, list_id, v, opts = {})
      data, _status_code, _headers = get_bio_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Bios: Get
    # Retrieve a specific Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BioListResponse, Fixnum, Hash)>] BioListResponse data, response status code and response headers
    def get_bio_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_bio ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_bio" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.get_bio" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_bio" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/bios/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BioListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_bio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bios: List
    # Retrieve all Bio Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @return [BioListsResponse]
    def get_bios(account_id, v, opts = {})
      data, _status_code, _headers = get_bios_with_http_info(account_id, v, opts)
      return data
    end

    # Bios: List
    # Retrieve all Bio Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to return.
    # @return [Array<(BioListsResponse, Fixnum, Hash)>] BioListsResponse data, response status code and response headers
    def get_bios_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_bios ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_bios" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_bios" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_bios, must be smaller than or equal to 50.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/bios".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BioListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_bios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Categories: List
    # Get available Categories.  All Locations are required to have an associated Category to assist with organization and search. Yext provides a hierarchy of business categories for this purpose, exposed by this API. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language Only categories that apply to this language will be returned.  **Example:** en  (default to en)
    # @option opts [String] :country Only categories that apply in this country will be returned.  **Example:** US  (default to US)
    # @return [BusinessCategoriesResponse]
    def get_business_categories(v, opts = {})
      data, _status_code, _headers = get_business_categories_with_http_info(v, opts)
      return data
    end

    # Categories: List
    # Get available Categories.  All Locations are required to have an associated Category to assist with organization and search. Yext provides a hierarchy of business categories for this purpose, exposed by this API. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language Only categories that apply to this language will be returned.  **Example:** en 
    # @option opts [String] :country Only categories that apply in this country will be returned.  **Example:** US 
    # @return [Array<(BusinessCategoriesResponse, Fixnum, Hash)>] BusinessCategoriesResponse data, response status code and response headers
    def get_business_categories_with_http_info(v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_business_categories ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_business_categories" if v.nil?
      # resource path
      local_var_path = "/categories".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BusinessCategoriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_business_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Custom Fields: Get
    # Gets a specific Custom Field in an Account.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param [Hash] opts the optional parameters
    # @return [CustomFieldResponse]
    def get_custom_field(v, account_id, custom_field_id, opts = {})
      data, _status_code, _headers = get_custom_field_with_http_info(v, account_id, custom_field_id, opts)
      return data
    end

    # Custom Fields: Get
    # Gets a specific Custom Field in an Account.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFieldResponse, Fixnum, Hash)>] CustomFieldResponse data, response status code and response headers
    def get_custom_field_with_http_info(v, account_id, custom_field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_custom_field ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_custom_field" if v.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_custom_field" if account_id.nil?
      # verify the required parameter 'custom_field_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_field_id' when calling KnowledgeManagerApi.get_custom_field" if custom_field_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/customFields/{customFieldId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'customFieldId' + '}', custom_field_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomFieldResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Custom Fields: List
    # Returns a list of Custom Fields in an Account.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @return [CustomFieldsResponse]
    def get_custom_fields(v, account_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(v, account_id, opts)
      return data
    end

    # Custom Fields: List
    # Returns a list of Custom Fields in an Account.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of results to return.
    # @option opts [Integer] :limit Number of results to return.
    # @return [Array<(CustomFieldsResponse, Fixnum, Hash)>] CustomFieldsResponse data, response status code and response headers
    def get_custom_fields_with_http_info(v, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_custom_fields ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_custom_fields" if v.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_custom_fields" if account_id.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 1000.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_custom_fields, must be smaller than or equal to 1000.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/customfields".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomFieldsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Events: Get
    # Retrieve a specific Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [EventListResponse]
    def get_event(account_id, list_id, v, opts = {})
      data, _status_code, _headers = get_event_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Events: Get
    # Retrieve a specific Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventListResponse, Fixnum, Hash)>] EventListResponse data, response status code and response headers
    def get_event_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_event ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_event" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.get_event" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_event" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/events/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Events: List
    # Retrieve all Event Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @return [EventListsResponse]
    def get_events(account_id, v, opts = {})
      data, _status_code, _headers = get_events_with_http_info(account_id, v, opts)
      return data
    end

    # Events: List
    # Retrieve all Event Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to return.
    # @return [Array<(EventListsResponse, Fixnum, Hash)>] EventListsResponse data, response status code and response headers
    def get_events_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_events ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_events" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_events" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_events, must be smaller than or equal to 50.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/events".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Google Fields: List
    # Use the Google Fields endpoint to retrieve a complete list of Google's location attributes for each business category. This list includes attributes that may not apply to all Locations in an account. The set of attributes available to a Location depends on its primary business category. You can view and edit the attributes of Locations in the googleAttributes Location field.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [GoogleFieldsResponse]
    def get_google_keywords(v, opts = {})
      data, _status_code, _headers = get_google_keywords_with_http_info(v, opts)
      return data
    end

    # Google Fields: List
    # Use the Google Fields endpoint to retrieve a complete list of Google&#39;s location attributes for each business category. This list includes attributes that may not apply to all Locations in an account. The set of attributes available to a Location depends on its primary business category. You can view and edit the attributes of Locations in the googleAttributes Location field.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoogleFieldsResponse, Fixnum, Hash)>] GoogleFieldsResponse data, response status code and response headers
    def get_google_keywords_with_http_info(v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_google_keywords ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_google_keywords" if v.nil?
      # resource path
      local_var_path = "/googlefields".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoogleFieldsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_google_keywords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Language Profiles: Get
    # Gets the the requested Language Profile for a given Location.
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;   (default to false)
    # @return [LocationResponse]
    def get_language_profile(account_id, location_id, language_code, v, opts = {})
      data, _status_code, _headers = get_language_profile_with_http_info(account_id, location_id, language_code, v, opts)
      return data
    end

    # Language Profiles: Get
    # Gets the the requested Language Profile for a given Location.
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;  
    # @return [Array<(LocationResponse, Fixnum, Hash)>] LocationResponse data, response status code and response headers
    def get_language_profile_with_http_info(account_id, location_id, language_code, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_language_profile ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_language_profile" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.get_language_profile" if location_id.nil?
      # verify the required parameter 'language_code' is set
      fail ArgumentError, "Missing the required parameter 'language_code' when calling KnowledgeManagerApi.get_language_profile" if language_code.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_language_profile" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}/profiles/{language_code}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s).sub('{' + 'language_code' + '}', language_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'resolvePlaceholders'] = opts[:'resolve_placeholders'] if !opts[:'resolve_placeholders'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_language_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Language Profiles: List
    # Get Language Profiles for a Location.
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;   (default to false)
    # @return [LanguageProfilesResponse]
    def get_language_profiles(account_id, location_id, v, opts = {})
      data, _status_code, _headers = get_language_profiles_with_http_info(account_id, location_id, v, opts)
      return data
    end

    # Language Profiles: List
    # Get Language Profiles for a Location.
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;  
    # @return [Array<(LanguageProfilesResponse, Fixnum, Hash)>] LanguageProfilesResponse data, response status code and response headers
    def get_language_profiles_with_http_info(account_id, location_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_language_profiles ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_language_profiles" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.get_language_profiles" if location_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_language_profiles" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}/profiles".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'resolvePlaceholders'] = opts[:'resolve_placeholders'] if !opts[:'resolve_placeholders'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LanguageProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_language_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Locations: Get
    # Gets the primary profile for a single Location.
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;   (default to false)
    # @return [LocationResponse]
    def get_location(account_id, location_id, v, opts = {})
      data, _status_code, _headers = get_location_with_http_info(account_id, location_id, v, opts)
      return data
    end

    # Locations: Get
    # Gets the primary profile for a single Location.
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;  
    # @option opts [String] :access_token Optional parameter to use OAuth access_token when `account_id` is 'me'
    # @return [Array<(LocationResponse, Fixnum, Hash)>] LocationResponse data, response status code and response headers
    def get_location_with_http_info(account_id, location_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_location ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_location" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.get_location" if location_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_location" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'resolvePlaceholders'] = opts[:'resolve_placeholders'] if !opts[:'resolve_placeholders'].nil?
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:'access_token'].nil? ? ['api_key'] : []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Folders: List
    # Returns a list of Location Folders in an Account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @return [FoldersResponse]
    def get_location_folders(account_id, v, opts = {})
      data, _status_code, _headers = get_location_folders_with_http_info(account_id, v, opts)
      return data
    end

    # Folders: List
    # Returns a list of Location Folders in an Account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of results to return.
    # @option opts [Integer] :limit Number of results to return.
    # @return [Array<(FoldersResponse, Fixnum, Hash)>] FoldersResponse data, response status code and response headers
    def get_location_folders_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_location_folders ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_location_folders" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_location_folders" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 1000.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_location_folders, must be smaller than or equal to 1000.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/folders".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FoldersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_location_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Locations: List
    # Get multiple Locations (primary profiles only).
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;   (default to false)
    # @return [LocationsResponse]
    def get_locations(account_id, v, opts = {})
      data, _status_code, _headers = get_locations_with_http_info(account_id, v, opts)
      return data
    end

    # Locations: List
    # Get multiple Locations (primary profiles only).
    # @param account_id
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to return.
    # @option opts [BOOLEAN] :resolve_placeholders Optional parameter to resolve all embedded fields in a Location object response. - &#x60;false&#x60; (default): Location object returns placeholder labels, e.g. \&quot;Your [[CITY]] store\&quot; - &#x60;true&#x60;: Location object returns placeholder values, e.g. \&quot;Your Fairfax store\&quot;
    # @option opts [String] :access_token Optional parameter to use OAuth access_token when `account_id` is 'me'
    # @return [Array<(LocationsResponse, Fixnum, Hash)>] LocationsResponse data, response status code and response headers
    def get_locations_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_locations ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_locations" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_locations" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_locations, must be smaller than or equal to 50.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/locations".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'resolvePlaceholders'] = opts[:'resolve_placeholders'] if !opts[:'resolve_placeholders'].nil?
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:'access_token'].nil? ? ['api_key'] : []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Menus: Get
    # Retrieve a specific Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [MenuListResponse]
    def get_menu(account_id, list_id, v, opts = {})
      data, _status_code, _headers = get_menu_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Menus: Get
    # Retrieve a specific Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MenuListResponse, Fixnum, Hash)>] MenuListResponse data, response status code and response headers
    def get_menu_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_menu ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_menu" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.get_menu" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_menu" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/menus/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MenuListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Menus: List
    # Retrieve all Menus for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @return [MenuListsResponse]
    def get_menus(account_id, v, opts = {})
      data, _status_code, _headers = get_menus_with_http_info(account_id, v, opts)
      return data
    end

    # Menus: List
    # Retrieve all Menus for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to return.
    # @return [Array<(MenuListsResponse, Fixnum, Hash)>] MenuListsResponse data, response status code and response headers
    def get_menus_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_menus ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_menus" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_menus" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_menus, must be smaller than or equal to 50.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/menus".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MenuListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_menus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Products: Get
    # Retrieve a specific Product List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ProductListResponse]
    def get_product(account_id, list_id, v, opts = {})
      data, _status_code, _headers = get_product_with_http_info(account_id, list_id, v, opts)
      return data
    end

    # Products: Get
    # Retrieve a specific Product List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductListResponse, Fixnum, Hash)>] ProductListResponse data, response status code and response headers
    def get_product_with_http_info(account_id, list_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_product ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_product" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.get_product" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_product" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/products/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Products: List
    # Retrieve all Product Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to return. (default to 0)
    # @return [ProductListsResponse]
    def get_products(account_id, v, opts = {})
      data, _status_code, _headers = get_products_with_http_info(account_id, v, opts)
      return data
    end

    # Products: List
    # Retrieve all Product Lists for an account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to return.
    # @return [Array<(ProductListsResponse, Fixnum, Hash)>] ProductListsResponse data, response status code and response headers
    def get_products_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.get_products ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.get_products" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.get_products" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.get_products, must be smaller than or equal to 50.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/products".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Locations: Search
    # Get multiple Locations (primary profiles only) that match provided filters.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset Number of results to skip. Used to page through results. (default to 0)
    # @option opts [String] :filters A set of filters that is applied to the set of locations that would otherwise be returned. Should be provided as a URL-encoded string containing a JSON object. The JSON object will be an array with one or more filter objects defined. All filter objects will apply as an intersection (i.e. AND). Field names reference Location fields, as well as custom fields using the format custom###, where ### is the custom field’s ID.  The filter types are the following. Note there may be multiple available specifications for a given filter type:  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Filter Type&lt;/th&gt;     &lt;th&gt;Syntax&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Full&lt;/td&gt;     &lt;td&gt;fieldName: {contains: $search}&lt;/td&gt;     &lt;td&gt;$search is the search string&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$search,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [contains,doesNotContain,startsWith,equalTo], $search is an array of search strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [empty,notEmpty]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Number&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $value}&lt;/td&gt;     &lt;td&gt;$type is one of [eq,lt,gt,le,ge], $value is the numeric value&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Number&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$value1, $value2]}&lt;/td&gt;     &lt;td&gt;$type is one of [between], $value1 and $value2 are numeric values&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $value}&lt;/td&gt;     &lt;td&gt;$type is one of [eq,lt,gt,le,ge], $value is a string of \&quot;YYYY-MM-DD” formatted date&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [empty,notEmpty]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$value1, $value2]}&lt;/td&gt;     &lt;td&gt;$type is one of [between], $value1 and $value2 are strings of \&quot;YYYY-MM-DD” formatted date&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of numeric category IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [none]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Assets&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of numeric category IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Assets&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [none]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Country&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$country,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $country is an array of country code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;PrimaryLanguage&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$language,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $language is an array of language code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;AlternateLanguage&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$language,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $language is an array of language code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;StringSingle&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$string,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $string is an array of strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;StringList&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$string,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $string is an array of strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;LocationType&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $id is an array of location type IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Bool&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [true,false]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Option&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $id}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $id is an option ID (For single option custom fields)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Option&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $string is an array of strings, combined with OR (For multi option custom fields)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  The following fields can be specified in the request (Field name/Filter Type/Example(s)):  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Field Name&lt;/th&gt;     &lt;th&gt;Filter Type&lt;/th&gt;     &lt;th&gt;Example(s)&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;location&lt;/td&gt;     &lt;td&gt;Full&lt;/td&gt;     &lt;td&gt;\&quot;location”: {\&quot;contains”: \&quot;Atlanta”}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;name&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;name”: {\&quot;startsWith”: [\&quot;Guitar”]}, \&quot;name”: {\&quot;contains”: [\&quot;A”,”B”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;address&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;address”: {\&quot;startsWith”: [\&quot;South”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;address2&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;address2”: {\&quot;contains”: [\&quot;Suite”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;city&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;city”: {\&quot;contains”: [\&quot;Atlanta”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;state&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;state”: {\&quot;contains”: [\&quot;AK”,”VA”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;zip&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;zip”: {\&quot;contains”: [\&quot;M5K 7QB”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;phones&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;phones”: {\&quot;startsWith”: [\&quot;703”,”571”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;specialOffer&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;specialOffer”: \&quot;notEmpty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;emails&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;emails”: {\&quot;doesNotContain”: [\&quot;@yext.com”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;website&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;website”: {\&quot;equalTo”: [\&quot;https://www.yext.com/”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;categories&lt;/td&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;\&quot;categories”: {\&quot;includes”: [23,755,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;closed&lt;/td&gt;     &lt;td&gt;Bool&lt;/td&gt;     &lt;td&gt;\&quot;closed”: true&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;storeId&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;storeId”: {\&quot;equalTo”: [\&quot;MCD0001”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;countryCode&lt;/td&gt;     &lt;td&gt;Country&lt;/td&gt;     &lt;td&gt;\&quot;countryCode”: {\&quot;notIncludes”: [\&quot;US”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;products&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;products”: {\&quot;startsWith”: [\&quot;Burger”,”Fries”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;services&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;services”: {\&quot;contains”: [\&quot;Manicures”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;specialties&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;services”: \&quot;notEmpty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;associations&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;associations”: \&quot;empty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;brands&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;brands”: {\&quot;equalTo”: [\&quot;North Face”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;languages&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;languages”: {\&quot;equalTo”: [\&quot;English”,”Spanish”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;keywords&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;keywords”: {\&quot;startsWith”: [\&quot;Franchise”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;menuIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;menuIds”: {\&quot;includes”: [23,755,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;productListIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;productListIds”: {\&quot;notIncludes”: [2]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;calendarIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;calendarIds”: {\&quot;notIncludes”: [34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;bioIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;bioIds”: {\&quot;includes”: [23,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;custom###&lt;/td&gt;     &lt;td&gt;Text, Number, Date, Bool, or Option&lt;/td&gt;     &lt;td&gt;\&quot;custom123”: {\&quot;equalTo”: [\&quot;asdf”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;folder&lt;/td&gt;     &lt;td&gt;int64&lt;/td&gt;     &lt;td&gt;\&quot;folder”: 123&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;primary_language&lt;/td&gt;     &lt;td&gt;PrimaryLanguage&lt;/td&gt;     &lt;td&gt;\&quot;primary_language”: {\&quot;is”: \&quot;fr_CA”}&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt; 
    # @return [LocationsResponse]
    def search_locations(account_id, v, opts = {})
      data, _status_code, _headers = search_locations_with_http_info(account_id, v, opts)
      return data
    end

    # Locations: Search
    # Get multiple Locations (primary profiles only) that match provided filters.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to skip. Used to page through results.
    # @option opts [String] :filters A set of filters that is applied to the set of locations that would otherwise be returned. Should be provided as a URL-encoded string containing a JSON object. The JSON object will be an array with one or more filter objects defined. All filter objects will apply as an intersection (i.e. AND). Field names reference Location fields, as well as custom fields using the format custom###, where ### is the custom field’s ID.  The filter types are the following. Note there may be multiple available specifications for a given filter type:  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Filter Type&lt;/th&gt;     &lt;th&gt;Syntax&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Full&lt;/td&gt;     &lt;td&gt;fieldName: {contains: $search}&lt;/td&gt;     &lt;td&gt;$search is the search string&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$search,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [contains,doesNotContain,startsWith,equalTo], $search is an array of search strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [empty,notEmpty]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Number&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $value}&lt;/td&gt;     &lt;td&gt;$type is one of [eq,lt,gt,le,ge], $value is the numeric value&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Number&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$value1, $value2]}&lt;/td&gt;     &lt;td&gt;$type is one of [between], $value1 and $value2 are numeric values&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $value}&lt;/td&gt;     &lt;td&gt;$type is one of [eq,lt,gt,le,ge], $value is a string of \&quot;YYYY-MM-DD” formatted date&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [empty,notEmpty]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Date&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$value1, $value2]}&lt;/td&gt;     &lt;td&gt;$type is one of [between], $value1 and $value2 are strings of \&quot;YYYY-MM-DD” formatted date&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of numeric category IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [none]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Assets&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of numeric category IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Assets&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [none]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Country&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$country,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $country is an array of country code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;PrimaryLanguage&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$language,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $language is an array of language code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;AlternateLanguage&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$language,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $language is an array of language code strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;StringSingle&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$string,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $string is an array of strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;StringList&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$string,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $string is an array of strings, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;LocationType&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $id is an array of location type IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Bool&lt;/td&gt;     &lt;td&gt;fieldName: $type&lt;/td&gt;     &lt;td&gt;$type is one of [true,false]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Option&lt;/td&gt;     &lt;td&gt;fieldName: {$type: $id}&lt;/td&gt;     &lt;td&gt;$type is one of [is,isNot], $id is an option ID (For single option custom fields)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Option&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $string is an array of strings, combined with OR (For multi option custom fields)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;fieldName: {$type: [$id,...]}&lt;/td&gt;     &lt;td&gt;$type is one of [includes,notIncludes], $id is an array of IDs, combined with OR&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  The following fields can be specified in the request (Field name/Filter Type/Example(s)):  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Field Name&lt;/th&gt;     &lt;th&gt;Filter Type&lt;/th&gt;     &lt;th&gt;Example(s)&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;location&lt;/td&gt;     &lt;td&gt;Full&lt;/td&gt;     &lt;td&gt;\&quot;location”: {\&quot;contains”: \&quot;Atlanta”}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;name&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;name”: {\&quot;startsWith”: [\&quot;Guitar”]}, \&quot;name”: {\&quot;contains”: [\&quot;A”,”B”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;address&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;address”: {\&quot;startsWith”: [\&quot;South”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;address2&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;address2”: {\&quot;contains”: [\&quot;Suite”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;city&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;city”: {\&quot;contains”: [\&quot;Atlanta”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;state&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;state”: {\&quot;contains”: [\&quot;AK”,”VA”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;zip&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;zip”: {\&quot;contains”: [\&quot;M5K 7QB”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;phones&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;phones”: {\&quot;startsWith”: [\&quot;703”,”571”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;specialOffer&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;specialOffer”: \&quot;notEmpty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;emails&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;emails”: {\&quot;doesNotContain”: [\&quot;@yext.com”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;website&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;website”: {\&quot;equalTo”: [\&quot;https://www.yext.com/”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;categories&lt;/td&gt;     &lt;td&gt;Categories&lt;/td&gt;     &lt;td&gt;\&quot;categories”: {\&quot;includes”: [23,755,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;closed&lt;/td&gt;     &lt;td&gt;Bool&lt;/td&gt;     &lt;td&gt;\&quot;closed”: true&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;storeId&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;storeId”: {\&quot;equalTo”: [\&quot;MCD0001”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;countryCode&lt;/td&gt;     &lt;td&gt;Country&lt;/td&gt;     &lt;td&gt;\&quot;countryCode”: {\&quot;notIncludes”: [\&quot;US”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;products&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;products”: {\&quot;startsWith”: [\&quot;Burger”,”Fries”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;services&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;services”: {\&quot;contains”: [\&quot;Manicures”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;specialties&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;services”: \&quot;notEmpty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;associations&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;associations”: \&quot;empty”&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;brands&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;brands”: {\&quot;equalTo”: [\&quot;North Face”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;languages&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;languages”: {\&quot;equalTo”: [\&quot;English”,”Spanish”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;keywords&lt;/td&gt;     &lt;td&gt;Text&lt;/td&gt;     &lt;td&gt;\&quot;keywords”: {\&quot;startsWith”: [\&quot;Franchise”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;menuIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;menuIds”: {\&quot;includes”: [23,755,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;productListIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;productListIds”: {\&quot;notIncludes”: [2]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;calendarIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;calendarIds”: {\&quot;notIncludes”: [34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;bioIds&lt;/td&gt;     &lt;td&gt;IdList&lt;/td&gt;     &lt;td&gt;\&quot;bioIds”: {\&quot;includes”: [23,34]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;custom###&lt;/td&gt;     &lt;td&gt;Text, Number, Date, Bool, or Option&lt;/td&gt;     &lt;td&gt;\&quot;custom123”: {\&quot;equalTo”: [\&quot;asdf”]}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;folder&lt;/td&gt;     &lt;td&gt;int64&lt;/td&gt;     &lt;td&gt;\&quot;folder”: 123&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;primary_language&lt;/td&gt;     &lt;td&gt;PrimaryLanguage&lt;/td&gt;     &lt;td&gt;\&quot;primary_language”: {\&quot;is”: \&quot;fr_CA”}&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt; 
    # @return [Array<(LocationsResponse, Fixnum, Hash)>] LocationsResponse data, response status code and response headers
    def search_locations_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.search_locations ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.search_locations" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.search_locations" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeManagerApi.search_locations, must be smaller than or equal to 50.0.'
      end

      if !opts[:'offset'].nil? && opts[:'offset'] > 9950.0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling KnowledgeManagerApi.search_locations, must be smaller than or equal to 9950.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/locationsearch".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#search_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bios: Update
    # Update an existing Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [BioListResponse]
    def update_bio(account_id, list_id, v, body, opts = {})
      data, _status_code, _headers = update_bio_with_http_info(account_id, list_id, v, body, opts)
      return data
    end

    # Bios: Update
    # Update an existing Bios List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BioListResponse, Fixnum, Hash)>] BioListResponse data, response status code and response headers
    def update_bio_with_http_info(account_id, list_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_bio ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_bio" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.update_bio" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_bio" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.update_bio" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/bios/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BioListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_bio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Custom Fields: Update
    # Updates a single Custom Field in an Account.  Note that the only updatable values in an existing Custom Field are its name, group, description, alternate language behavior, as well as available options if its `type` is `SINGLE_OPTION` or `MULTI_OPTION`.  * If options are modified, every location with that option selected will have the new value.  * If options are deleted, all locations with that option will no longer have that option selected.  * If the deleted options are the only options selected for a location, the location will no longer have a value set for that Custom Field. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def update_custom_field(v, account_id, custom_field_id, body, opts = {})
      data, _status_code, _headers = update_custom_field_with_http_info(v, account_id, custom_field_id, body, opts)
      return data
    end

    # Custom Fields: Update
    # Updates a single Custom Field in an Account.  Note that the only updatable values in an existing Custom Field are its name, group, description, alternate language behavior, as well as available options if its &#x60;type&#x60; is &#x60;SINGLE_OPTION&#x60; or &#x60;MULTI_OPTION&#x60;.  * If options are modified, every location with that option selected will have the new value.  * If options are deleted, all locations with that option will no longer have that option selected.  * If the deleted options are the only options selected for a location, the location will no longer have a value set for that Custom Field. 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param account_id 
    # @param custom_field_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def update_custom_field_with_http_info(v, account_id, custom_field_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_custom_field ..."
      end
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_custom_field" if v.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_custom_field" if account_id.nil?
      # verify the required parameter 'custom_field_id' is set
      fail ArgumentError, "Missing the required parameter 'custom_field_id' when calling KnowledgeManagerApi.update_custom_field" if custom_field_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.update_custom_field" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/customFields/{customFieldId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'customFieldId' + '}', custom_field_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Events: Update
    # Update an existing Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [EventListResponse]
    def update_event(account_id, list_id, v, body, opts = {})
      data, _status_code, _headers = update_event_with_http_info(account_id, list_id, v, body, opts)
      return data
    end

    # Events: Update
    # Update an existing Event List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventListResponse, Fixnum, Hash)>] EventListResponse data, response status code and response headers
    def update_event_with_http_info(account_id, list_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_event ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_event" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.update_event" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_event" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.update_event" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/events/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Locations: Update
    # Updates the primary profile for a Location.  **NOTE:** Despite using the PUT method, Locations: Update only updates supplied fields. Omitted fields are not modified.  **NOTE:** The Location's primary profile language can be changed by calling this endpoint with a different, but unused, language code. 
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_request 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def update_location(account_id, location_id, v, location_request, opts = {})
      data, _status_code, _headers = update_location_with_http_info(account_id, location_id, v, location_request, opts)
      return data
    end

    # Locations: Update
    # Updates the primary profile for a Location.  **NOTE:** Despite using the PUT method, Locations: Update only updates supplied fields. Omitted fields are not modified.  **NOTE:** The Location&#39;s primary profile language can be changed by calling this endpoint with a different, but unused, language code. 
    # @param account_id 
    # @param location_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def update_location_with_http_info(account_id, location_id, v, location_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_location ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_location" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.update_location" if location_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_location" if v.nil?
      # verify the required parameter 'location_request' is set
      fail ArgumentError, "Missing the required parameter 'location_request' when calling KnowledgeManagerApi.update_location" if location_request.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(location_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Menus: Update
    # Update an existing Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [MenuListResponse]
    def update_menu(account_id, list_id, v, body, opts = {})
      data, _status_code, _headers = update_menu_with_http_info(account_id, list_id, v, body, opts)
      return data
    end

    # Menus: Update
    # Update an existing Menu.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MenuListResponse, Fixnum, Hash)>] MenuListResponse data, response status code and response headers
    def update_menu_with_http_info(account_id, list_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_menu ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_menu" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.update_menu" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_menu" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.update_menu" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/menus/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MenuListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Products: Update
    # Update an existing Product List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ProductListResponse]
    def update_product(account_id, list_id, v, body, opts = {})
      data, _status_code, _headers = update_product_with_http_info(account_id, list_id, v, body, opts)
      return data
    end

    # Products: Update
    # Update an existing Product List.
    # @param account_id 
    # @param list_id ID of this List.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductListResponse, Fixnum, Hash)>] ProductListResponse data, response status code and response headers
    def update_product_with_http_info(account_id, list_id, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.update_product ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.update_product" if account_id.nil?
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling KnowledgeManagerApi.update_product" if list_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.update_product" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.update_product" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/products/{listId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#update_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Language Profiles: Upsert
    # Creates and / or sets the fields for a Language Profile  **NOTE:** You can change a Language Profile’s language by supplying a different (but unused) language code. 
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :primary When present and set to true, the specified profile will become the location’s primary Language Profile.
    # @return [ErrorResponse]
    def upsert_language_profile(account_id, location_id, language_code, v, body, opts = {})
      data, _status_code, _headers = upsert_language_profile_with_http_info(account_id, location_id, language_code, v, body, opts)
      return data
    end

    # Language Profiles: Upsert
    # Creates and / or sets the fields for a Language Profile  **NOTE:** You can change a Language Profile’s language by supplying a different (but unused) language code. 
    # @param account_id 
    # @param location_id 
    # @param language_code Locale code.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :primary When present and set to true, the specified profile will become the location’s primary Language Profile.
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def upsert_language_profile_with_http_info(account_id, location_id, language_code, v, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: KnowledgeManagerApi.upsert_language_profile ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling KnowledgeManagerApi.upsert_language_profile" if account_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling KnowledgeManagerApi.upsert_language_profile" if location_id.nil?
      # verify the required parameter 'language_code' is set
      fail ArgumentError, "Missing the required parameter 'language_code' when calling KnowledgeManagerApi.upsert_language_profile" if language_code.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling KnowledgeManagerApi.upsert_language_profile" if v.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling KnowledgeManagerApi.upsert_language_profile" if body.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/locations/{locationId}/profiles/{language_code}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s).sub('{' + 'language_code' + '}', language_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'primary'] = opts[:'primary'] if !opts[:'primary'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeManagerApi#upsert_language_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
